// <auto-generated />
using System;
using Bloodhound.Core.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bloodhound.Core.Migrations
{
    [DbContext(typeof(BloodhoundContext))]
    partial class BloodhoundContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bloodhound.Core.Model.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("EventTypeId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new { EventTypeId = 1, EventTypeName = "Entry" },
                        new { EventTypeId = 2, EventTypeName = "Exit" },
                        new { EventTypeId = 3, EventTypeName = "Tamper" }
                    );
                });

            modelBuilder.Entity("Bloodhound.Core.Model.GeoFenceType", b =>
                {
                    b.Property<int>("GeoFenceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GeoFenceTypeName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("GeoFenceTypeId");

                    b.ToTable("GeoFenceTypes");

                    b.HasData(
                        new { GeoFenceTypeId = 1, GeoFenceTypeName = "Inclusion" },
                        new { GeoFenceTypeId = 2, GeoFenceTypeName = "Exclusion" }
                    );
                });

            modelBuilder.Entity("Bloodhound.Core.Model.Offender", b =>
                {
                    b.Property<long>("OffenderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OffenderName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("OffenderSummary")
                        .IsRequired()
                        .HasMaxLength(2048);

                    b.HasKey("OffenderId");

                    b.ToTable("Offenders");

                    b.HasData(
                        new { OffenderId = 1L, OffenderName = "Theodore Bundy", OffenderSummary = "Kidnapping, Murder (Ellensburg, WA)" },
                        new { OffenderId = 2L, OffenderName = "Jeffrey Dahmer", OffenderSummary = "Kidnapping, Murder, Cannibalism (Milwaukee, MN)" }
                    );
                });

            modelBuilder.Entity("Bloodhound.Core.Model.OffenderEvent", b =>
                {
                    b.Property<long>("OffenderEventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<int>("EventTypeId");

                    b.Property<long?>("OffenderGeoFenceId");

                    b.Property<long>("OffenderId");

                    b.Property<long?>("OffenderLocationId");

                    b.HasKey("OffenderEventId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("OffenderGeoFenceId");

                    b.HasIndex("OffenderId");

                    b.HasIndex("OffenderLocationId");

                    b.ToTable("OffenderEvents");
                });

            modelBuilder.Entity("Bloodhound.Core.Model.OffenderGeoFence", b =>
                {
                    b.Property<long>("OffenderGeoFenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("GeoFenceName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("GeoFenceTypeId");

                    b.Property<decimal>("NorthEastLatitude")
                        .HasColumnType("decimal(12,6)");

                    b.Property<decimal>("NorthEastLongitude")
                        .HasColumnType("decimal(12,6)");

                    b.Property<long>("OffenderId");

                    b.Property<decimal>("SouthWestLatitude")
                        .HasColumnType("decimal(12,6)");

                    b.Property<decimal>("SouthWestLongitude")
                        .HasColumnType("decimal(12,6)");

                    b.HasKey("OffenderGeoFenceId");

                    b.HasIndex("GeoFenceTypeId");

                    b.HasIndex("OffenderId");

                    b.ToTable("OffenderGeoFences");

                    b.HasData(
                        new { OffenderGeoFenceId = 1L, Address = "400 E University Way, Ellensburg, WA 98926", GeoFenceName = "Central Washington University", GeoFenceTypeId = 2, NorthEastLatitude = 47.013964m, NorthEastLongitude = -120.531863m, OffenderId = 1L, SouthWestLatitude = 46.999670m, SouthWestLongitude = -120.548865m },
                        new { OffenderGeoFenceId = 2L, Address = "2925 Columbia Dr #127, Portage, WI 52901", GeoFenceName = "Columbia Correctional Institution", GeoFenceTypeId = 1, NorthEastLatitude = 43.567909m, NorthEastLongitude = -89.486586m, OffenderId = 2L, SouthWestLatitude = 43.564084m, SouthWestLongitude = -89.493882m }
                    );
                });

            modelBuilder.Entity("Bloodhound.Core.Model.OffenderLocation", b =>
                {
                    b.Property<long>("OffenderLocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("LocationTime");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(12,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(12,6)");

                    b.Property<long>("OffenderId");

                    b.HasKey("OffenderLocationId");

                    b.HasIndex("OffenderId");

                    b.ToTable("OffenderLocations");

                    b.HasData(
                        new { OffenderLocationId = 1L, LocationTime = new DateTimeOffset(new DateTime(2020, 2, 6, 20, 45, 38, 538, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)), Latitude = 47.006817m, Longitude = -120.551m, OffenderId = 1L },
                        new { OffenderLocationId = 2L, LocationTime = new DateTimeOffset(new DateTime(2020, 2, 6, 20, 45, 38, 541, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)), Latitude = 43.566m, Longitude = -89.490234m, OffenderId = 2L }
                    );
                });

            modelBuilder.Entity("Bloodhound.Core.Model.OffenderEvent", b =>
                {
                    b.HasOne("Bloodhound.Core.Model.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bloodhound.Core.Model.OffenderGeoFence", "OffenderGeoFence")
                        .WithMany()
                        .HasForeignKey("OffenderGeoFenceId");

                    b.HasOne("Bloodhound.Core.Model.Offender", "Offender")
                        .WithMany()
                        .HasForeignKey("OffenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bloodhound.Core.Model.OffenderLocation", "OffenderLocation")
                        .WithMany()
                        .HasForeignKey("OffenderLocationId");
                });

            modelBuilder.Entity("Bloodhound.Core.Model.OffenderGeoFence", b =>
                {
                    b.HasOne("Bloodhound.Core.Model.GeoFenceType", "GeoFenceType")
                        .WithMany()
                        .HasForeignKey("GeoFenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bloodhound.Core.Model.Offender", "Offender")
                        .WithMany()
                        .HasForeignKey("OffenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bloodhound.Core.Model.OffenderLocation", b =>
                {
                    b.HasOne("Bloodhound.Core.Model.Offender", "Offender")
                        .WithMany()
                        .HasForeignKey("OffenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
